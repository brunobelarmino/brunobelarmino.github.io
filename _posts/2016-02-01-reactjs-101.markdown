---
layout:     post
title:      "ReactJS 101"
subtitle:   "A biblioteca para criação de interfaces do Facebook"
date:       2016-02-01 18:00:00
author:     "Bruno Belarmino"
header-img: "img/post-bg-04.jpg"
disqus-identifier: "2016-02-01-reactjs-101"
---

<p>Fala amigos!</p>

<p>
	A partir de hoje darei inicio a uma série de posts sobre ReactJS. 
</p>

<h4>TL;DR</h4>

<p>
	ReactJS é a biblioteca criada pelo Facebook para criação de interfaces. Pensando no mundo <strong>MV*</strong> qual vivenciamos hoje, este seria o <strong>V</strong>.
</p>

<p>
	Através de uma api simples qual previlegia o uso do javascript e com uma performance acima da apresentada pelos seus concorrentes, o ReactJS vem ganhando cada dia mais adeptos.
</p>

<h4>Building Blocks</h4>

<p>
	Fortemente inspirado pelo conceito de webcomponents, ReactJS tras dois grandes blocos onde o desenvolvedor deve se concentrar: <em>Components</em> e <em>Elements</em>.
</p>

<h5>Components</h5>

<p>
	É o template para criação de elementos. Fazendo um paralelo com a web atual, exemplos de components são <em>div</em>, <em>button</em>, <em>label</em> entre outros.
</p>

<h5>Elements</h5>

<p>
	<em>Element</em> é a instância de um <em>component</em>. Por exemplo quando inserimos um <em>button</em> em uma página HTML, este elemento é a materialização/instância de um componente no DOM.
</p>

<p>Complicado?</p>

<p>
	Vamos ver como funciona na prática:
</p>

<pre>
<code>
//cria elemento
var customDiv = React.createElement('div');

//renderiza elemento
ReactDOM.render(customDiv, document.getElementById('container'));
</code>
</pre>

<p>
	O código acima cria um <em>element</em> baseado no <em>component</em> div e renderiza o mesmo no DOM.
</p>

<p>
	Legal! Mas usar diretamente o HTML não é mais eficiente?
	<br>
	A resposta é: normalmente não.
</p>

<p>
	E Eis que lhes apresento o <em>Virtual DOM</em>.
</p>

<h4>Virtual DOM</h4>

<p>
	Como todos sabem a manipulação de DOM além de não ser uma das coisas mais simples no mundo web, ainda tem um grande impacto na performance de nossas aplicações.
</p>

<p>
	E com isso em mente os engenheiros do facebook/instagram criaram o <em>virtual DOM</em> que na prática é a representação do DOM em memória. Deste modo, todos os <em>elements</em> que criamos utilizando React.createElement são criados e mantidos nesse ambiente virtual antes de serem renderizados no DOM original.
</p>

<p>
	A mágica acontece de verdade nas atualizações. Imagine o seguinte cenário: numa tela HTML temos um campo de texto do tipo numeric e um botão de adicionar. Toda vez que clicamos no botão adiciona em 1 o valor do campo de texto. 
</p>

<p>
	Uma atividade super simples como adicionar um handler para o evento de click do botão e dentro do handler pegar o campo de texto através da api de DOM e somar 1 ao value do mesmo. Tudo lindo, mas tem alguns problemas: 
</p>

<ol>
	<li>
		adicionar e manter event handlers nos <em>elements</em> do DOM consomem bastante memória.
	</li>
	<li>
		modificar o conteúdo da página gera reflow (nova renderização do <em>element</em> modificado e seus filhos).
	</li>
</ol>

<p>
	Agora imagine tudo isso acontecendo em uma página com centenas ou talvez milhares de <em>elements</em> no DOM. Não é uma experiência muito boa.
</p>

<p>
	 Com o <em>virtual DOM</em> esses problemas são minimizados com a técnica conhecida como  "o menos é mais", ou seja, toda vez que algo é alterado nos <em>elements</em> que foram criados através do método React.createElement. O ReactJS renderiza esse conteúdo no <em>virtual DOM</em> e através de um algoritmo super otimizado calcula a diferença entre o DOM atual e o DOM com as alterações e são essas diferenças que são renderizadas no DOM original. E desta forma causa o mínimo de impacto possível fazendo com que nossas páginas estejam sempre responsivas e rápidas para o usuário.
</p>

<p>
	Por hoje é isso!
	<br>
	Espero que tenham gostado dessa introdução e até a próxima!
</p>

<h5>Links de referência:</h5>
<p>
	- <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">DOM (Document Object Model)</a>
	<br>
	- <a target="_blank" href="https://facebook.github.io/react/docs/getting-started.html">ReactJS</a>
</p>
		

<script type="text/javascript">
var disqus_identifier = "2016-02-01-reactjs-101";
var disqus_title = 'ReactJS 101';
</script>

{% include comments.html %}